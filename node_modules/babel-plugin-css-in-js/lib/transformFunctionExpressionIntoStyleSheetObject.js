'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformFunctionExpressionIntoStyleSheetObject;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _vm = require('vm');

var _vm2 = _interopRequireDefault(_vm);

var _babelCore = require('babel-core');

var _babelGenerator = require('babel-generator');

var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useStrict = /['"]use strict['"];?(\r?\n)*/g;

function transformFunctionExpressionIntoStyleSheetObject(expr, context, transformOptions) {
  (0, _assert2.default)(_babelCore.types.isFunctionExpression(expr) || _babelCore.types.isArrowFunctionExpression(expr), 'must be a function expression');

  var code = (0, _babelCore.transform)('\n    const fn = ' + (0, _babelGenerator2.default)(expr).code + ';\n    result = fn(context) || {};\n  ', transformOptions).code.replace(useStrict, '');

  var sandbox = { result: null, context: context };
  var vmContext = _vm2.default.createContext(sandbox);
  var script = new _vm2.default.Script(code);

  try {
    script.runInContext(vmContext, sandbox);
  } catch (err) {
    if (err.name === 'ReferenceError') {
      (0, _assert2.default)(false, err + '\nWhen providing a function to cssInJS, all references must be in the function\'s scope.');
    } else {
      (0, _assert2.default)(false, err.toString());
    }
  }

  return sandbox.result;
}
module.exports = exports['default'];
